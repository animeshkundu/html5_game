// Generated by CoffeeScript 1.6.3
(function() {
  var bcolor;

  bcolor = (function() {
    var attach_to_child;

    bcolor.prototype.mode = 0;

    bcolor.prototype.player = 1;

    bcolor.prototype.opponent = 2;

    bcolor.prototype.free = -1;

    bcolor.prototype.stop = '#';

    bcolor.prototype.colors = ["#E54661", "#FFA644", "#998A2F", "#2C594F", "#002D40"];

    bcolor.prototype.color_count = 5;

    bcolor.prototype.user_color = "#808080";

    bcolor.prototype.steps = 0;

    bcolor.prototype.board_percentage = 0;

    bcolor.prototype.board = null;

    bcolor.prototype.cell_size = 25;

    bcolor.prototype.number_of_rows = 15;

    bcolor.prototype.number_of_columns = 15;

    bcolor.prototype.canvas = null;

    bcolor.prototype.drawing_context = null;

    function bcolor() {
      this.create_canvas();
      this.resize_canvas();
      this.create_drawing_context();
      this.init_board();
    }

    bcolor.prototype.create_canvas = function() {
      this.canvas = document.createElement('canvas');
      return document.body.appendChild(this.canvas);
    };

    bcolor.prototype.resize_canvas = function() {
      this.canvas.height = this.cell_size * this.number_of_rows;
      return this.canvas.width = this.cell_size * this.number_of_columns;
    };

    bcolor.prototype.create_drawing_context = function() {
      return this.drawing_context = this.canvas.getContext('2d');
    };

    bcolor.prototype.init_board = function() {
      var column, row, seed_cell, _i, _j, _ref, _ref1;
      this.board = [];
      for (row = _i = 0, _ref = this.number_of_rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        this.board[row] = [];
        for (column = _j = 0, _ref1 = this.number_of_columns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          seed_cell = this.seed(row, column);
          this.board[row][column] = seed_cell;
        }
      }
      this.board[0][0].player = this.player;
      this.board[0][0].color = this.user_color;
      this.draw_grid();
      return this.show_controls();
    };

    bcolor.prototype.seed = function(row, column) {
      var rand;
      rand = Math.floor(Math.random() * 100);
      rand = rand % this.color_count;
      return {
        color: this.colors[rand],
        row: row,
        column: column,
        player: null
      };
    };

    bcolor.prototype.draw_grid = function() {
      var column, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.number_of_rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (column = _j = 0, _ref1 = this.number_of_columns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.draw_cell(this.board[row][column]));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    bcolor.prototype.draw_cell = function(cell) {
      var fill_style, x, y;
      x = cell.row * this.cell_size;
      y = cell.column * this.cell_size;
      fill_style = cell.color;
      this.drawing_context.strokeStyle = 'rgba(242, 198, 65, 0.1)';
      this.drawing_context.strokeRect(x, y, this.cell_size, this.cell_size);
      this.drawing_context.fillStyle = fill_style;
      return this.drawing_context.fillRect(x, y, this.cell_size, this.cell_size);
    };

    bcolor.prototype.show_controls = function() {
      var child, control, i, len, new_html, _i, _j, _len, _ref, _results;
      new_html = '';
      len = this.colors.length;
      control = document.createElement('ul');
      control.id = 'controls';
      control.style.cssText = "margin: 0px auto;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;";
      for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
        new_html = "<li class='color' id='" + i + "' style='background-color:" + this.colors[i] + ";color:" + this.colors[i] + ";'></li>";
        new_html += '';
        control.innerHTML += new_html;
      }
      document.body.appendChild(control);
      _ref = control.children;
      _results = [];
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        child = _ref[_j];
        _results.push(child.addEventListener('click', attach_to_child, false));
      }
      return _results;
    };

    attach_to_child = function() {
      return window.gamex.next(this.id);
    };

    bcolor.prototype.next = function(color) {
      if (this.is_game_over() !== true) {
        this.recalc_field(color);
        return this.steps++;
      }
    };

    bcolor.prototype.recalc_field = function(color) {
      var color_field, column, neighbour_player, row, _i, _j, _ref, _ref1;
      color = this.colors[color];
      for (row = _i = 0, _ref = this.number_of_rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        for (column = _j = 0, _ref1 = this.number_of_columns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          color_field = this.field_is_color(color, row, column);
          neighbour_player = this.player_has_neighbour_field(row, column);
          if (color_field && neighbour_player) {
            this.take_possession_of(color, row, column);
          }
        }
      }
      this.update_colors(color);
      return this.draw_grid();
    };

    bcolor.prototype.field_is_color = function(color, row, column) {
      return this.board[row][column].color === color;
    };

    bcolor.prototype.is_game_over = function() {
      return this.board_percentage === 100;
    };

    bcolor.prototype.player_has_neighbour_field = function(row, column) {
      if (column > 0 && this.board[row][column - 1].player === this.player) {
        return true;
      }
      if (column < this.board[row].length - 1 && this.board[row][column + 1].player === this.player) {
        return true;
      }
      if (row > 0 && this.board[row - 1][column].player === this.player) {
        return true;
      }
      if (row < this.board.length - 1 && this.board[row + 1][column].player === this.player) {
        return true;
      }
      return false;
    };

    bcolor.prototype.take_possession_of = function(color, row, column) {
      this.board[row][column].player = this.player;
      this.board[row][column].color = color;
      if (column > 0 && this.field_is_color(color, row, column - 1) && this.board[row][column - 1].player !== this.player) {
        this.take_possession_of(color, row, column - 1);
      }
      if (column < this.board[row].length - 1 && this.field_is_color(color, row, column + 1) && this.board[row][column + 1].player !== this.player) {
        this.take_possession_of(color, row, column + 1);
      }
      if (row > 0 && this.field_is_color(color, row - 1, column) && this.board[row - 1][column].player !== this.player) {
        this.take_possession_of(color, row - 1, column);
      }
      if (row < this.board.length - 1 && this.field_is_color(color, row + 1, column) && this.board[row + 1][column].player !== this.player) {
        return this.take_possession_of(color, row + 1, column);
      }
    };

    bcolor.prototype.update_colors = function(color) {
      var column, player_rects, row, total_rects, _i, _j, _ref, _ref1;
      total_rects = this.number_of_rows * this.number_of_columns;
      player_rects = 0;
      for (row = _i = 0, _ref = this.number_of_rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        for (column = _j = 0, _ref1 = this.number_of_columns; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; column = 0 <= _ref1 ? ++_j : --_j) {
          if (this.board[row][column].player === this.player) {
            this.board[row][column].color = this.user_color;
            player_rects++;
          }
        }
      }
      if (player_rects === total_rects) {
        return this.board_percentage = 100;
      } else {
        return this.board_percentage = Math.floor(100 * (player_rects / total_rects));
      }
    };

    return bcolor;

  })();

  window.bcolor = bcolor;

}).call(this);
